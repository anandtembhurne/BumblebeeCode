<?xml version="1.0"?>
<component name="org.nuxeo.elasticsearch.test.contrib">
    <extension target="org.nuxeo.elasticsearch.ElasticSearchComponent" point="elasticSearchLocal">
      <elasticSearchLocal clusterName="nuxeoTestClusterLocal" nodeName="nuxeoTestNode"
        indexStoreType="mmapfs" httpEnabled="true" />
    </extension>

  <!--
    <extension target="org.nuxeo.elasticsearch.ElasticSearchComponent"
      point="elasticSearchLocal">
      <elasticSearchLocal
            clusterName="nuxeoTestClusterLocalFs"
            nodeName="nuxeoTestNode"
            pathData="/tmp/elasticsearch"
            indexStoreType="mmapfs"
            httpEnabled="true"
          />
    </extension>

    <extension target="org.nuxeo.elasticsearch.ElasticSearchComponent"
      point="elasticSearchRemote">
      <elasticSearchRemote clusterName="elasticsearch"
        addressList="localhost:9300" />
    </extension>

    -->


  <extension target="org.nuxeo.elasticsearch.ElasticSearchComponent" point="elasticSearchIndex">
    <elasticSearchIndex name="nxutest" type="doc" repository="test">
      <settings>
{
   "number_of_shards" : 1,
   "number_of_replicas" : 0,
   "analysis" : {
      "filter" : {
         "en_stem_filter" : {
            "name" : "minimal_english",
            "type" : "stemmer"
         },
         "en_stop_filter" : {
            "stopwords" : [
               "_english_"
            ],
            "type" : "stop"
         },
        "word_delimiter_filter" : {
          "type" : "word_delimiter",
          "preserve_original" : true
        }
      },
      "tokenizer" : {
         "path_tokenizer" : {
            "delimiter" : "/",
            "type" : "path_hierarchy"
         },
         "ngram_tokenizer": {
           "type": "nGram",
           "min_gram": 3,
           "max_gram": 12
          }
      },
      "analyzer" : {
         "en_analyzer" : {
            "alias" : "fulltext",
            "filter" : [
               "word_delimiter_filter",
               "lowercase",
               "en_stop_filter",
               "en_stem_filter",
               "asciifolding"
            ],
            "type" : "custom",
            "tokenizer" : "standard"
         },
         "path_analyzer" : {
            "type" : "custom",
            "tokenizer" : "path_tokenizer"
         },
        "lowercase_analyzer" : {
          "type" : "custom",
          "filter" : ["lowercase", "asciifolding"],
          "tokenizer" : "keyword"
        },
        "ngram_analyzer": {
          "type": "custom",
          "filter": [
            "lowercase"
          ],
          "tokenizer": "ngram_tokenizer"
        },
        "default" : {
           "type" : "custom",
           "tokenizer" : "keyword"
        }
      }
   }
}
      </settings>
      <mapping>
{
   "_all" : {
      "analyzer" : "fulltext"
   },
   "properties" : {
      "dc:title" : {
         "type" : "multi_field",
         "fields" : {
           "dc:title" : {
             "index" : "not_analyzed",
             "type" : "string"
           },
           "fulltext" : {
             "boost": 2,
             "type": "string",
             "analyzer" : "fulltext"
           },
           "lowercase" : {
             "analyzer" : "lowercase_analyzer",
             "type" : "string"
           },
           "ngram": {
             "type": "string",
             "analyzer": "ngram_analyzer"
           }
         }
      },
      "dc:description" : {
        "type" : "multi_field",
        "fields" : {
          "dc:description" : {
            "index" : "not_analyzed",
            "type" : "string"
           },
          "lowercase" : {
             "analyzer" : "lowercase_analyzer",
             "type" : "string"
           }
        }
      },
      "ecm:binarytext*" : {
         "type" : "string",
         "analyzer" : "fulltext"
      },
      "ecm:path" : {
         "type" : "multi_field",
         "fields" : {
            "children" : {
               "analyzer" : "path_analyzer",
               "search_analyzer" : "keyword",
               "type" : "string"
            },
            "ecm:path" : {
               "index" : "not_analyzed",
               "type" : "string"
            }
         }
      },
      "ecm:pos": {
         "type": "integer"
      },
      "dc:created": {
         "format": "dateOptionalTime",
        "type": "date"
      },
      "dc:modified": {
         "format": "dateOptionalTime",
        "type": "date"
      }
   }
}
      </mapping>

    </elasticSearchIndex>

  </extension>

</component>
