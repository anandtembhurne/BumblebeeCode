{
  "_args": [
    [
      {
        "raw": "vulcanize@https://registry.npmjs.org/vulcanize/-/vulcanize-1.14.0.tgz",
        "scope": null,
        "escapedName": "vulcanize",
        "name": "vulcanize",
        "rawSpec": "https://registry.npmjs.org/vulcanize/-/vulcanize-1.14.0.tgz",
        "spec": "https://registry.npmjs.org/vulcanize/-/vulcanize-1.14.0.tgz",
        "type": "remote"
      },
      "/home/uno/anand/ICICI_Bumblebee/Bumblebee/nuxeo-dm/nuxeo-platform-webapp/node_modules/grunt-vulcanize"
    ]
  ],
  "_from": "vulcanize@>=1.9.3 <2.0.0",
  "_id": "vulcanize@1.14.0",
  "_inCache": true,
  "_location": "/grunt-vulcanize/vulcanize",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vulcanize@https://registry.npmjs.org/vulcanize/-/vulcanize-1.14.0.tgz",
    "scope": null,
    "escapedName": "vulcanize",
    "name": "vulcanize",
    "rawSpec": "https://registry.npmjs.org/vulcanize/-/vulcanize-1.14.0.tgz",
    "spec": "https://registry.npmjs.org/vulcanize/-/vulcanize-1.14.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/grunt-vulcanize"
  ],
  "_resolved": "https://registry.npmjs.org/vulcanize/-/vulcanize-1.14.0.tgz",
  "_shasum": "94da4765df53c0ce181ba4ce32330312825290b8",
  "_shrinkwrap": null,
  "_spec": "vulcanize@https://registry.npmjs.org/vulcanize/-/vulcanize-1.14.0.tgz",
  "_where": "/home/uno/anand/ICICI_Bumblebee/Bumblebee/nuxeo-dm/nuxeo-platform-webapp/node_modules/grunt-vulcanize",
  "author": {
    "name": "The Polymer Project Authors"
  },
  "bin": {
    "vulcanize": "bin/vulcanize"
  },
  "bugs": {
    "url": "https://github.com/Polymer/vulcanize/issues"
  },
  "dependencies": {
    "dom5": "^1.1.0",
    "es6-promise": "^2.1.0",
    "hydrolysis": "^1.19.1",
    "nopt": "^3.0.1",
    "path-posix": "^1.0.0",
    "update-notifier": "^0.5.0"
  },
  "description": "Process Web Components into one output file",
  "devDependencies": {
    "jshint": "^2.7.0",
    "mocha": "^2.2.4"
  },
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/Polymer/vulcanize#readme",
  "keywords": [
    "web components",
    "polymer"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/vulcan.js",
  "name": "vulcanize",
  "optionalDependencies": {
    "update-notifier": "^0.5.0"
  },
  "readme": "[![NPM version](http://img.shields.io/npm/v/vulcanize.svg)](https://npmjs.org/package/vulcanize)\n[![Build Status](http://img.shields.io/travis/Polymer/vulcanize.svg)](https://travis-ci.org/Polymer/vulcanize)\n\n# Vulcanize\n\n### Reduce an HTML file and its dependent HTML Imports into one file\n\n>Named for the [Vulcanization](http://en.wikipedia.org/wiki/Vulcanization) process that turns polymers into more durable\nmaterials.\n\nWeb pages that use multiple [HTML Imports](http://www.html5rocks.com/en/tutorials/webcomponents/imports/) to load dependencies may end up making lots of network round-trips. In many cases, this can lead to long initial load times and unnecessary bandwidth usage. The Vulcanize tool follows HTML Imports and `<script>` tags to inline these external assets into a single page, to be used in production.\n\nIn the future, technologies such as [HTTP/2](http://en.wikipedia.org/wiki/HTTP/2) and [Server Push](https://http2.github.io/faq/#whats-the-benefit-of-server-push) will likely obsolete the need for a tool like vulcanize for production uses.\n\n## Installation\n\n`vulcanize` is available on npm. For maximium utility, `vulcanize` should be installed globally.\n\n    npm install -g vulcanize\n\nThis will install `vulcanize` to `/usr/local/bin/vulcanize` (you may need `sudo`\nfor this step).\n\n## Options\n- `-h`|`--help`: print this message\n- `-v`|`--version`: print version number\n- `-p <arg>`|`--abspath <arg>`: use <arg> as the \"webserver root\", make all adjusted urls absolute\n- `--exclude <path>`: exclude a subpath from root. Use multiple times to exclude multiple paths. Tags to excluded paths are kept.\n- `--strip-exclude`: Exclude a subpath and remove any links referencing it.\n- `--inline-scripts`: Inline external scripts.\n- `--inline-css`: Inline external stylesheets.\n- `--add-import <path>`: Add this import to the target HTML before vulcanizing. Can be used multiple times.\n- `--redirect <uri>|<path>`: Takes an argument in the form of URI|PATH where url is a URI composed of a protocol, hostname, and path and PATH is a local filesystem path to replace the matched URI part with. Multiple redirects may be specified; the earliest ones have the highest priority.\n- `--strip-comments`: Strips all HTML comments not containing an @license from the document.\n- `--no-implicit-strip`: *DANGEROUS*! Avoid stripping imports of the transitive dependencies of imports specified with `--exclude`. May result in duplicate javascript inlining.\n- `--out-html <path>`: If specified, output will be written to <path> instead of stdout.\n\n## Usage\nThe command\n\n    vulcanize target.html\n\nwill inline the HTML Imports of `target.html` and print the resulting HTML to\nstandard output.\n\nThe command\n\n    vulcanize target.html > build.html\n\nwill inline the HTML Imports of `target.html` and print the result to\n`build.html`.\n\nThe command\n\n    vulcanize -p \"path/to/target/\" /target.html\n\nwill inline the HTML Imports of `target.html`, treat `path/to/target/` as the\nwebroot of target.html, and make all urls absolute to the provided webroot.\n\nThe command\n\n    vulcanize --exclude \"path/to/target/subpath/\" --exclude \"path/to/target/subpath2/\" target.html\n\nwill inline the HTML Imports of `target.html` that are not in the directory\n`path/to/target/subpath` nor `path/to/target/subpath2`.\n\nIf the `--strip-exclude` flag is used, the HTML Import `<link>` tags that\npoint to resources in `path/totarget/subpath` and `path/to/target/subpath2/`\nwill also be removed.\n\nThe command\n\n    vulcanize --inline-scripts target.html\n\nwill inline scripts in `target.html` as well as HTML Imports. Exclude flags will apply to both Imports and Scripts.\n\nThe command\n\n    vulcanize --inline-css target.html\n\nwill inline Polymerized stylesheets, `<link rel=\"import\" type=\"css\">`\n\nThe command\n\n    vulcanize --strip-comments target.html\n\nwill remove HTML comments, except for those that begin with `@license`.\nLicense comments will be deduplicated.\n\n## Using vulcanize programmatically\n\nVulcanize as a library has two exported function.\n\n`vulcanize` constructor takes an object of options similar to the command line\noptions.\n- `abspath`: A folder to treat as \"webroot\".\n  - When specified, use an absolute path to `target`.\n- `excludes`: An array of RegExp objects to exclude paths from being inlined.\n- `stripExcludes`: Similar to `excludes`, but strips the imports from the output entirely.\n    - If `stripExcludes` is empty, it will be set the value of `excludes` by default.\n- `inlineScripts`: Inline external scripts.\n- `inlineCss`: Inline external stylesheets.\n- `addedImports`: Additional HTML imports to inline, added to the end of the\n    target file\n- `redirects`: An array of strings with the format `URI|PATH` where url is a URI composed of a protocol, hostname, and path and PATH is a local filesystem path to replace the matched URI part with. Multiple redirects may be specified; the earliest ones have the highest priority.\n- `stripComments`: Remove non-license HTML comments.\n- `inputUrl`: A URL string that will override the `target` argument to\n    `vulcanize.process()`.\n    By design, gulp and grunt plugins expect to work on the given file path.\n    `vulcanize` has its own file loader, and expects to be given URLs. In\n    instances where the filename cannot be used as a URL `inputUrl` will\n    override the filename.\n- `loader`: A [hydrolysis](https://www.npmjs.com/package/hydrolysis) loader.\n    This loader is generated with the `target` argument to `vulcan.process` and\n    the `exclude` paths. A custom loader can be given if more advanced setups\n    are necesssary.\n\n`vulcanize.process` takes a `target` path to `target.html` and a callback.\n\nExample:\n```js\nvar Vulcanize = require('vulcanize');\nvar hydrolysis = require('hydrolysis');\n\n/* a Hydrolysis loader object (optional) */\nvar loader = new hydrolysis.loader(...)\n\nvar vulcan = new Vulcanize({\n  abspath: '',\n  excludes: [\n  ],\n  stripExcludes: [\n  ],\n  inlineScripts: false,\n  inlineCss: false,\n  addedImports: [\n  ],\n  redirects: [\n  ],\n  implicitStrip: true,\n  stripComments: false\n  // optional\n  loader: loader,\n  inputUrl: ''\n});\n\nvulcan.process(target, function(err, inlinedHtml) {\n});\n```\n\n## What happened to [feature] from 0.X?\n- `--csp` mode has been moved into [crisper](https://github.com/PolymerLabs/crisper)\n- `--strip` mode was removed, use something like [html-minifier](https://github.com/kangax/html-minifier) or [minimize](https://github.com/Moveo/minimize)\n  - Use these at your own risk, they may not understand all of Polymer's uses of HTML or CSS (https://github.com/kangax/html-minifier/issues/377)\n\n## What about build tools\n- [grunt-vulcanize](https://www.npmjs.com/package/grunt-vulcanize)\n- [gulp-vulcanize](https://www.npmjs.com/package/gulp-vulcanize)\n- [broccoli-vulcanize](https://www.npmjs.com/package/broccoli-vulcanize)\n\n[![Analytics](https://ga-beacon.appspot.com/UA-39334307-2/Polymer/vulcanize/README)](https://github.com/igrigorik/ga-beacon)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/Polymer/vulcanize.git"
  },
  "scripts": {
    "test": "jshint --verbose lib bin/vulcanize test && mocha"
  },
  "version": "1.14.0"
}
